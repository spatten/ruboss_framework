<?xml version="1.0" encoding="utf-8"?>
<!--
 Copyright 2008, Ruboss Technology Corporation.

 This software is dual-licensed under both the terms of the Ruboss Commercial
 License v1 (RCL v1) as published by Ruboss Technology Corporation and under
 the terms of the GNU General Public License v3 (GPL v3) as published by the
 Free Software Foundation.

 Both the RCL v1 (rcl-1.0.txt) and the GPL v3 (gpl-3.0.txt) are included in
 the source code. If you have purchased a commercial license then only the
 RCL v1 applies; otherwise, only the GPL v3 applies. To learn more or to buy a
 commercial license, please go to http://ruboss.com.
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml">
<mx:Metadata>
  [Event("change")]
</mx:Metadata>
<mx:Script><![CDATA[
  import mx.collections.ArrayCollection;
  import org.ruboss.collections.RubossCollection;
  import org.ruboss.Ruboss;

  [Bindable]
  public var defaultSelectedItem:String = null;

  [Bindable]
  public var radioItems:Array;
  
  [Bindable]
  public var comboItems:RubossCollection;
  
  [Bindable]
  public var matchField:String;
  
  [Bindable]
  public var comboPrompt:String = "Select one...";
  
  [Bindable]
  public var comboWidth:int = 200;
  
  private var _selectedItem:Object;
  
  private function getRadioButtonItems(radioItems:Array, comboItems:RubossCollection):ArrayCollection {
    if (radioItems == null || comboItems == null) return null;
    if (matchField == null) {
      return new ArrayCollection(radioItems);
    } else {
      var retval:ArrayCollection = new ArrayCollection();
      for (var i:int = 0; i < radioItems.length; i++) {
        retval.addItem(comboItems.withPropertyValue(matchField, radioItems[i]));
      }
      if (selectedItem == null) {
        selectedItem = comboItems.withPropertyValue(matchField, defaultSelectedItem);
      }
      return retval;
    }
  }
  
  [Bindable]
  public function get selectedItem():Object {
    return _selectedItem;
  }
  
  public function set selectedItem(value:Object):void {
    trace("RadioComboBox#set selectedItem = " + value);
    _selectedItem = value;
    radioButtonGroup.selectedValue = value;
    comboBox.selectedItem = value;
    dispatchEvent(new Event("change"));
  }
  
  private function onRadioButtonClick(event:Event):void {
    trace("RadioComboBox#onRadioButtonClick, event = " + event);
    comboBox.selectedIndex = -1;
    selectedItem = radioButtonGroup.selectedValue;
  }
  
  private function onComboBoxChange(event:Event):void {
    trace("RadioComboBox#onComboBoxChange, event = " + event);
    selectedItem = comboBox.selectedItem;
  }
  
  private function filterRadioItems(obj:Object):Boolean {
    var searchKey:Object = (matchField == null) ? obj : obj[matchField];
    trace("searchKey = " + searchKey);
    trace("radioItems = " + radioItems);
    trace("radioItems.indexOf(searchKey) = " + radioItems.indexOf(searchKey));
    return radioItems.indexOf(searchKey) < 0;
  }
]]></mx:Script>
  <mx:HBox width="100%">
    <mx:RadioButtonGroup id="radioButtonGroup" selectedValue="{selectedItem}"/>
    <mx:Repeater id="rp" dataProvider="{getRadioButtonItems(radioItems, comboItems)}">
      <mx:RadioButton
        label="{rp.currentItem}"
        value="{rp.currentItem}"
        group="{radioButtonGroup}"
        click="onRadioButtonClick(event);"/>
    </mx:Repeater>
  </mx:HBox>
  <mx:HBox width="100%">
    <mx:RadioButton id="comboRB" label="" value="{null}" group="{radioButtonGroup}" click="onRadioButtonClick(event);"/>
    <mx:HBox enabled="{comboRB.selected}">
      <mx:ComboBox id="comboBox"
        dataProvider="{Ruboss.filter(comboItems, filterRadioItems)}"
        prompt="{comboPrompt}"
        width="{comboWidth}"
        selectedItem="{selectedItem}"
        change="onComboBoxChange(event);"/>
    </mx:HBox>
  </mx:HBox>
</mx:VBox>